#pragma kernel ApplyBrush

RWStructuredBuffer<float> dataBuffer;

uint extent;
uint chunkSize;

float brushPosX;
float brushPosY;
float brushPosZ;

float brushNormalX;
float brushNormalY;
float brushNormalZ;

float strength;
float smooth;
float size;

uint indexFromCoord(uint x, uint y, uint z)
{
    return z * (extent) * (extent) + y * (extent) + x;
}

[numthreads(8, 8, 8)]
void ApplyBrush(uint3 id : SV_DispatchThreadID)
{
    float3 currentPos = float3(id.x, id.y, id.z);
    float3 brushPos = float3(brushPosX, brushPosY, brushPosZ);
    float brushDistance = distance(currentPos, brushPos);
    
    if (brushDistance < size)
    {
        float brushTime = brushDistance / size;
        float brushInfluence = ((1 - brushTime) * 0.05f * strength) * smooth + exp(-pow((-brushTime), 2)) * 0.05f * strength * (1 - smooth);
        float index = indexFromCoord(id.x, id.y, id.z);
        float initialValue = dataBuffer[index];
        
        float pointHeight = dot(float3(brushNormalX, brushNormalY, brushNormalZ), currentPos - brushPos);

        dataBuffer[index] = lerp(initialValue, clamp(-pointHeight * 0.1f + 0.5f, 0.0f, 1.0f), brushInfluence);
    }
}